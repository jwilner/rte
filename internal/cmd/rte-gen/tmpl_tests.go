package main

import (
	"bytes"
	"fmt"
	"io"
	"text/template"
)

var tmplTest = template.Must(template.New("").Parse(`
// Code generated by cmd/rte-gen/gen.go DO NOT EDIT.
package funcs_test

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/jwilner/rte"
)

func TestFuncs(t *testing.T) {
	for _, c := range []struct {
		Name, Route, Path string
		Handler  		  interface{}
		ErrMsg, Expected  string
	} {
		{
			Name:    "invalid-handler",
			Route:   "/",
			Path:    "/",
			Handler: func(){},
			ErrMsg:  "route 0 \"GET /\": handler has an unsupported signature: func()",
		},
		{
			Name:     "func0-handler",
			Route:    "/",
			Path:     "/",
			Handler:  http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				_ = json.NewEncoder(w).Encode([]string {})
			}),
			Expected: "[]\n",
		},
{{- range $sig := $.Signatures }}
		{
			Name:     "{{ .Name }}",
			Route:    "/{{ range $idx, $p := .PNames }}{{ if $idx }}/{{ end }}:var-{{ $p }}{{ end }}",
			Path:     "/{{ range $idx, $p := .PNames }}{{ if $idx }}/{{ end }}{{ $p }}{{ end }}",
{{- if and (not .Arr) (gt .Count 0) }}
			Handler:  func(w http.ResponseWriter, r *http.Request, {{ range $idx, $p := .PNames }}{{ if $idx }}, {{ end }}{{ $p }}{{ end }} string) {
				_ = json.NewEncoder(w).Encode([]string {
	{{- range $p := .PNames }}
					{{ $p }},
	{{- end }}
				})
{{- else if eq .Count 0 }}
			Handler:  func(w http.ResponseWriter, r *http.Request) {
				_ = json.NewEncoder(w).Encode([]string {})
{{- else }}
			Handler:  func(w http.ResponseWriter, r *http.Request, pVars [{{ .Count }}]string) {
				_ = json.NewEncoder(w).Encode(pVars)
{{- end }}
			},
			Expected: "[{{ range $i, $p := .PNames }}{{ if $i }},{{ end }}\"{{ $p }}\"{{ end }}]\n",
		},
{{- end }}
	} {
		t.Run(c.Name, func(t *testing.T) {
			tbl, err := rte.New([]rte.Route{
				{
					Method:  "GET",
					Path: 	 c.Route,
					Handler: c.Handler,
				},
			})

			if c.ErrMsg != "" {
				found := ""
				if err != nil {
					found = err.Error()
				}
				if found != c.ErrMsg {
					t.Fatalf("Wanted error %q but got %q", c.ErrMsg, found)
				}
			} else {
				w := httptest.NewRecorder()
				tbl.ServeHTTP(w, httptest.NewRequest("GET", c.Path, nil))

				if body := w.Body.String(); body != c.Expected {
					t.Fatalf("resp: got %q, %q", body, c.Expected)
				}
			}
		})
	}
}

func BenchmarkFuncs(b *testing.B) {
	for _, c := range []struct {
		Name     string
		Route 	 string
		Path 	 string
		Handler  interface{}
	} {

{{- range $sig := $.Signatures }}
		{
			"{{ .Name }}",
			"/{{ range $idx, $p := .PNames }}{{ if $idx }}/{{ end }}:var-{{ $p }}{{ end }}",
			"/{{ range $idx, $p := .PNames }}{{ if $idx }}/{{ end }}{{ $p }}{{ end }}",
{{- if and (not .Arr) (gt .Count 0) }}
			func(w http.ResponseWriter, r *http.Request, {{ range $idx, $p := .PNames }}{{ if $idx }}, {{ end }}{{ $p }}{{ end }} string) {
{{- else if eq .Count 0 }}
			func(w http.ResponseWriter, r *http.Request) {
{{- else }}
			func(w http.ResponseWriter, r *http.Request, pVars [{{ .Count }}]string) {
{{- end }}
			},
		},
{{- end }}
	} {
		b.Run(c.Name, func(b *testing.B) {
			tbl := rte.Must([]rte.Route{
				{
					Method: "GET",
					Path: 	c.Route,
					Handler: c.Handler,
				},
			})
			r := httptest.NewRequest("GET", c.Path, nil)
			w := httptest.NewRecorder()

			b.ReportAllocs()
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				tbl.ServeHTTP(w, r)
			}
		})
	}
}
`))

func writeTestFile(w io.Writer, sigs []Signature) error {
	var buf bytes.Buffer
	if err := tmplTest.Execute(&buf, struct {
		Signatures []Signature
	}{sigs}); err != nil {
		return fmt.Errorf("tmplTest.Execute: %v", err)
	}

	return writeFormatted(buf.Bytes(), w)
}
