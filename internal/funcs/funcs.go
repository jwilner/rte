// Code generated by cmd/rte-gen/gen.go DO NOT EDIT.
package funcs

import (
	"net/http"
)

const (
	maxVars = 8
)

// PathVars is a fixed size array used to back the maximum number of possible path variables.
type PathVars [maxVars]string

// Handler is a handler function permitting no-allocation handling of path variables
type Handler func(w http.ResponseWriter, r *http.Request, pathVars PathVars)

// Convert converts the provided interface to a Handler if possible.
func Convert(i interface{}) (Handler, int, bool) {
	switch v := i.(type) {
	case http.Handler:
		return func0(v.ServeHTTP), 0, true
	case func(w http.ResponseWriter, r *http.Request):
		return func0(v), 0, true
	case func(w http.ResponseWriter, r *http.Request, p0 string):
		return func1(v), 1, true
	case func(w http.ResponseWriter, r *http.Request, pVars [1]string):
		return arrFunc1(v), 1, true
	case func(w http.ResponseWriter, r *http.Request, p0, p1 string):
		return func2(v), 2, true
	case func(w http.ResponseWriter, r *http.Request, pVars [2]string):
		return arrFunc2(v), 2, true
	case func(w http.ResponseWriter, r *http.Request, p0, p1, p2 string):
		return func3(v), 3, true
	case func(w http.ResponseWriter, r *http.Request, pVars [3]string):
		return arrFunc3(v), 3, true
	case func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3 string):
		return func4(v), 4, true
	case func(w http.ResponseWriter, r *http.Request, pVars [4]string):
		return arrFunc4(v), 4, true
	case func(w http.ResponseWriter, r *http.Request, pVars [5]string):
		return arrFunc5(v), 5, true
	case func(w http.ResponseWriter, r *http.Request, pVars [6]string):
		return arrFunc6(v), 6, true
	case func(w http.ResponseWriter, r *http.Request, pVars [7]string):
		return arrFunc7(v), 7, true
	case func(w http.ResponseWriter, r *http.Request, pVars [maxVars]string):
		return arrFunc8(v), 8, true
	default:
		return nil, 0, false
	}
}

// generated handler wrappers which avoid allocs

// func0 takes in a no path variable handler and returns a Handler fit for static paths
func func0(f func(w http.ResponseWriter, r *http.Request)) Handler {
	return func(w http.ResponseWriter, r *http.Request, _ PathVars) {
		f(w, r)
	}
}

// func1 takes in a standard http handler also expecting 1 path variable values and returns a valid bound handler
func func1(f func(w http.ResponseWriter, r *http.Request, p0 string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		f(w, r, pVars[0])
	}
}

// arrFunc1 takes in handler expecting array of 1 path variable values and returns a valid handler
func arrFunc1(f func(w http.ResponseWriter, r *http.Request, pVars [1]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [1]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// func2 takes in a standard http handler also expecting 2 path variable values and returns a valid bound handler
func func2(f func(w http.ResponseWriter, r *http.Request, p0, p1 string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		f(w, r, pVars[0], pVars[1])
	}
}

// arrFunc2 takes in handler expecting array of 2 path variable values and returns a valid handler
func arrFunc2(f func(w http.ResponseWriter, r *http.Request, pVars [2]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [2]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// func3 takes in a standard http handler also expecting 3 path variable values and returns a valid bound handler
func func3(f func(w http.ResponseWriter, r *http.Request, p0, p1, p2 string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		f(w, r, pVars[0], pVars[1], pVars[2])
	}
}

// arrFunc3 takes in handler expecting array of 3 path variable values and returns a valid handler
func arrFunc3(f func(w http.ResponseWriter, r *http.Request, pVars [3]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [3]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// func4 takes in a standard http handler also expecting 4 path variable values and returns a valid bound handler
func func4(f func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3 string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		f(w, r, pVars[0], pVars[1], pVars[2], pVars[3])
	}
}

// arrFunc4 takes in handler expecting array of 4 path variable values and returns a valid handler
func arrFunc4(f func(w http.ResponseWriter, r *http.Request, pVars [4]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [4]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// arrFunc5 takes in handler expecting array of 5 path variable values and returns a valid handler
func arrFunc5(f func(w http.ResponseWriter, r *http.Request, pVars [5]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [5]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// arrFunc6 takes in handler expecting array of 6 path variable values and returns a valid handler
func arrFunc6(f func(w http.ResponseWriter, r *http.Request, pVars [6]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [6]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// arrFunc7 takes in handler expecting array of 7 path variable values and returns a valid handler
func arrFunc7(f func(w http.ResponseWriter, r *http.Request, pVars [7]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		var trimmed [7]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}

// arrFunc8 takes in handler expecting array of 8 path variable values and returns a valid handler
func arrFunc8(f func(w http.ResponseWriter, r *http.Request, pVars [maxVars]string)) Handler {
	return func(w http.ResponseWriter, r *http.Request, pVars PathVars) {
		f(w, r, [maxVars]string(pVars))
	}
}
