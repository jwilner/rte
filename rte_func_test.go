// Code generated by cmd/rte-gen/gen.go DO NOT EDIT.
package rte_test

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/jwilner/rte"
)

func TestFuncs(t *testing.T) {
	for _, c := range []struct {
		Name     string
		Route    string
		Path     string
		Handler  rte.BoundHandler
		Expected string
	}{
		{
			"Func",
			"/",
			"/",
			rte.Func(func(w http.ResponseWriter, r *http.Request) {
				_ = json.NewEncoder(w).Encode([]string{})
			}),
			"[]\n",
		},
		{
			"Func1",
			"/:var-p0",
			"/p0",
			rte.Func1(func(w http.ResponseWriter, r *http.Request, p0 string) {
				_ = json.NewEncoder(w).Encode([]string{
					p0,
				})
			}),
			"[\"p0\"]\n",
		},
		{
			"Func2",
			"/:var-p0/:var-p1",
			"/p0/p1",
			rte.Func2(func(w http.ResponseWriter, r *http.Request, p0, p1 string) {
				_ = json.NewEncoder(w).Encode([]string{
					p0,
					p1,
				})
			}),
			"[\"p0\",\"p1\"]\n",
		},
		{
			"Func3",
			"/:var-p0/:var-p1/:var-p2",
			"/p0/p1/p2",
			rte.Func3(func(w http.ResponseWriter, r *http.Request, p0, p1, p2 string) {
				_ = json.NewEncoder(w).Encode([]string{
					p0,
					p1,
					p2,
				})
			}),
			"[\"p0\",\"p1\",\"p2\"]\n",
		},
		{
			"Func4",
			"/:var-p0/:var-p1/:var-p2/:var-p3",
			"/p0/p1/p2/p3",
			rte.Func4(func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3 string) {
				_ = json.NewEncoder(w).Encode([]string{
					p0,
					p1,
					p2,
					p3,
				})
			}),
			"[\"p0\",\"p1\",\"p2\",\"p3\"]\n",
		},
		{
			"Func5",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4",
			"/p0/p1/p2/p3/p4",
			rte.Func5(func(w http.ResponseWriter, r *http.Request, pVars [5]string) {
				_ = json.NewEncoder(w).Encode(pVars)
			}),
			"[\"p0\",\"p1\",\"p2\",\"p3\",\"p4\"]\n",
		},
		{
			"Func6",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4/:var-p5",
			"/p0/p1/p2/p3/p4/p5",
			rte.Func6(func(w http.ResponseWriter, r *http.Request, pVars [6]string) {
				_ = json.NewEncoder(w).Encode(pVars)
			}),
			"[\"p0\",\"p1\",\"p2\",\"p3\",\"p4\",\"p5\"]\n",
		},
		{
			"Func7",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4/:var-p5/:var-p6",
			"/p0/p1/p2/p3/p4/p5/p6",
			rte.Func7(func(w http.ResponseWriter, r *http.Request, pVars [7]string) {
				_ = json.NewEncoder(w).Encode(pVars)
			}),
			"[\"p0\",\"p1\",\"p2\",\"p3\",\"p4\",\"p5\",\"p6\"]\n",
		},
		{
			"Func8",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4/:var-p5/:var-p6/:var-p7",
			"/p0/p1/p2/p3/p4/p5/p6/p7",
			rte.Func8(func(w http.ResponseWriter, r *http.Request, pVars [8]string) {
				_ = json.NewEncoder(w).Encode(pVars)
			}),
			"[\"p0\",\"p1\",\"p2\",\"p3\",\"p4\",\"p5\",\"p6\",\"p7\"]\n",
		},
	} {
		t.Run(c.Name, func(t *testing.T) {
			tbl := rte.Must([]rte.Route{
				{
					Method:  "GET",
					Path:    c.Route,
					Handler: c.Handler,
				},
			})

			w := httptest.NewRecorder()
			tbl.ServeHTTP(w, httptest.NewRequest("GET", c.Path, nil))

			if body := w.Body.String(); body != c.Expected {
				t.Fatalf("resp: got %q, %q", body, c.Expected)
			}
		})
	}
}

func BenchmarkFuncs(b *testing.B) {
	for _, c := range []struct {
		Name    string
		Route   string
		Path    string
		Handler rte.BoundHandler
	}{
		{
			"Func",
			"/",
			"/",
			rte.Func(func(w http.ResponseWriter, r *http.Request) {
			}),
		},
		{
			"Func1",
			"/:var-p0",
			"/p0",
			rte.Func1(func(w http.ResponseWriter, r *http.Request, p0 string) {
			}),
		},
		{
			"Func2",
			"/:var-p0/:var-p1",
			"/p0/p1",
			rte.Func2(func(w http.ResponseWriter, r *http.Request, p0, p1 string) {
			}),
		},
		{
			"Func3",
			"/:var-p0/:var-p1/:var-p2",
			"/p0/p1/p2",
			rte.Func3(func(w http.ResponseWriter, r *http.Request, p0, p1, p2 string) {
			}),
		},
		{
			"Func4",
			"/:var-p0/:var-p1/:var-p2/:var-p3",
			"/p0/p1/p2/p3",
			rte.Func4(func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3 string) {
			}),
		},
		{
			"Func5",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4",
			"/p0/p1/p2/p3/p4",
			rte.Func5(func(w http.ResponseWriter, r *http.Request, pVars [5]string) {
			}),
		},
		{
			"Func6",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4/:var-p5",
			"/p0/p1/p2/p3/p4/p5",
			rte.Func6(func(w http.ResponseWriter, r *http.Request, pVars [6]string) {
			}),
		},
		{
			"Func7",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4/:var-p5/:var-p6",
			"/p0/p1/p2/p3/p4/p5/p6",
			rte.Func7(func(w http.ResponseWriter, r *http.Request, pVars [7]string) {
			}),
		},
		{
			"Func8",
			"/:var-p0/:var-p1/:var-p2/:var-p3/:var-p4/:var-p5/:var-p6/:var-p7",
			"/p0/p1/p2/p3/p4/p5/p6/p7",
			rte.Func8(func(w http.ResponseWriter, r *http.Request, pVars [8]string) {
			}),
		},
	} {
		b.Run(c.Name, func(b *testing.B) {
			tbl := rte.Must([]rte.Route{
				{
					Method:  "GET",
					Path:    c.Route,
					Handler: c.Handler,
				},
			})
			r := httptest.NewRequest("GET", c.Path, nil)
			w := httptest.NewRecorder()

			b.ReportAllocs()
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				tbl.ServeHTTP(w, r)
			}
		})
	}
}
