package rte

import (
	"net/http"

	"strconv"
)

// generated handler wrappers which avoid allocs
// do not edit this file!

// Func is a binding handler which routes requests without any path variables. It exists only to make
// http.HandlerFunc satisfy the Binder interface.
type Func func(
	w http.ResponseWriter,
	r *http.Request,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f Func) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 0 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		f(
			w,
			r,
		)
	}), nil
}

// FuncS1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 string
type FuncS1 func(
	w http.ResponseWriter,
	r *http.Request,
	s0 string,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncS1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 1 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		f(
			w,
			r,
			segs[0],
		)
	}), nil
}

// FuncI1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit integer
type FuncI1 func(
	w http.ResponseWriter,
	r *http.Request,
	i0 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncI1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 1 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		f(
			w,
			r,
			i0,
		)
	}), nil
}

// FuncH1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 hex, max-64 bit integer
type FuncH1 func(
	w http.ResponseWriter,
	r *http.Request,
	h0 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncH1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 1 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		h0, err := strconv.ParseInt(segs[0], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		f(
			w,
			r,
			h0,
		)
	}), nil
}

// FuncU1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit unsigned integer
type FuncU1 func(
	w http.ResponseWriter,
	r *http.Request,
	u0 uint64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncU1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 1 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		f(
			w,
			r,
			u0,
		)
	}), nil
}

// FuncS2 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 2 strings
type FuncS2 func(
	w http.ResponseWriter,
	r *http.Request,
	s0, s1 string,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncS2) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		f(
			w,
			r,
			segs[0],

			segs[1],
		)
	}), nil
}

// FuncS1I1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 string
// - 1 base-10, max-64 bit integer
type FuncS1I1 func(
	w http.ResponseWriter,
	r *http.Request,
	s0 string,
	i1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncS1I1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			segs[0],

			i1,
		)
	}), nil
}

// FuncS1H1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 string
// - 1 hex, max-64 bit integer
type FuncS1H1 func(
	w http.ResponseWriter,
	r *http.Request,
	s0 string,
	h1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncS1H1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		h1, err := strconv.ParseInt(segs[1], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			segs[0],

			h1,
		)
	}), nil
}

// FuncS1U1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 string
// - 1 base-10, max-64 bit unsigned integer
type FuncS1U1 func(
	w http.ResponseWriter,
	r *http.Request,
	s0 string,
	u1 uint64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncS1U1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		u1, err := strconv.ParseUint(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			segs[0],

			u1,
		)
	}), nil
}

// FuncI1S1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit integer
// - 1 string
type FuncI1S1 func(
	w http.ResponseWriter,
	r *http.Request,
	i0 int64,
	s1 string,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncI1S1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		f(
			w,
			r,
			i0,
			segs[1],
		)
	}), nil
}

// FuncI2 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 2 base-10, max-64 bit integers
type FuncI2 func(
	w http.ResponseWriter,
	r *http.Request,
	i0, i1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncI2) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			i0,
			i1,
		)
	}), nil
}

// FuncI1H1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 2 base-10, max-64 bit integers
type FuncI1H1 func(
	w http.ResponseWriter,
	r *http.Request,
	i0, h1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncI1H1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		h1, err := strconv.ParseInt(segs[1], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			i0,
			h1,
		)
	}), nil
}

// FuncI1U1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit integer
// - 1 base-10, max-64 bit unsigned integer
type FuncI1U1 func(
	w http.ResponseWriter,
	r *http.Request,
	i0 int64,
	u1 uint64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncI1U1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		u1, err := strconv.ParseUint(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			i0,
			u1,
		)
	}), nil
}

// FuncH1S1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 hex, max-64 bit integer
// - 1 string
type FuncH1S1 func(
	w http.ResponseWriter,
	r *http.Request,
	h0 int64,
	s1 string,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncH1S1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		h0, err := strconv.ParseInt(segs[0], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		f(
			w,
			r,
			h0,
			segs[1],
		)
	}), nil
}

// FuncH1I1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 2 hex, max-64 bit integers
type FuncH1I1 func(
	w http.ResponseWriter,
	r *http.Request,
	h0, i1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncH1I1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		h0, err := strconv.ParseInt(segs[0], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			h0,
			i1,
		)
	}), nil
}

// FuncH2 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 2 hex, max-64 bit integers
type FuncH2 func(
	w http.ResponseWriter,
	r *http.Request,
	h0, h1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncH2) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		h0, err := strconv.ParseInt(segs[0], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		h1, err := strconv.ParseInt(segs[1], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			h0,
			h1,
		)
	}), nil
}

// FuncH1U1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 hex, max-64 bit integer
// - 1 base-10, max-64 bit unsigned integer
type FuncH1U1 func(
	w http.ResponseWriter,
	r *http.Request,
	h0 int64,
	u1 uint64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncH1U1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		h0, err := strconv.ParseInt(segs[0], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		u1, err := strconv.ParseUint(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			h0,
			u1,
		)
	}), nil
}

// FuncU1S1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit unsigned integer
// - 1 string
type FuncU1S1 func(
	w http.ResponseWriter,
	r *http.Request,
	u0 uint64,
	s1 string,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncU1S1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		f(
			w,
			r,
			u0,
			segs[1],
		)
	}), nil
}

// FuncU1I1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit unsigned integer
// - 1 base-10, max-64 bit integer
type FuncU1I1 func(
	w http.ResponseWriter,
	r *http.Request,
	u0 uint64,
	i1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncU1I1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			u0,
			i1,
		)
	}), nil
}

// FuncU1H1 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 1 base-10, max-64 bit unsigned integer
// - 1 hex, max-64 bit integer
type FuncU1H1 func(
	w http.ResponseWriter,
	r *http.Request,
	u0 uint64,
	h1 int64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncU1H1) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		h1, err := strconv.ParseInt(segs[1], 16, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			u0,
			h1,
		)
	}), nil
}

// FuncU2 is a binding handler which matches a route with a specific signature. In addition to a response
// writer, and a request object, the provided handler requires the matched path contain in order:
// - 2 base-10, max-64 bit unsigned integers
type FuncU2 func(
	w http.ResponseWriter,
	r *http.Request,
	u0, u1 uint64,
)

// Bind takes in the segment indices from which handler logic should extract path variables (if any) and returns an
// http.Handler or an error on misconfiguration.
func (f FuncU2) Bind(bCtx BindContext) (http.Handler, error) {
	if len(bCtx.ParamPos) != 2 {
		return nil, ErrWrongNumParams
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, bCtx.ParamPos[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 0, err)
			return
		}

		u1, err := strconv.ParseUint(segs[1], 10, 64)
		if err != nil {
			bCtx.BadArgument(w, r, 1, err)
			return
		}

		f(
			w,
			r,
			u0,
			u1,
		)
	}), nil
}
