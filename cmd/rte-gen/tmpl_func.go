package main

import (
	"bytes"
	"fmt"
	"io"
	"text/template"
)

var (
	tmplFunc = template.Must(template.New("").Parse(`
package rte

import (
	"net/http"
)

// generated handler wrappers which avoid allocs
// do not edit this file!

{{ range $sig := .Signatures }}
{{ if gt (len .Params) 0 }}
// {{ .Name }} takes in a standard http handler also expecting {{ len .Params }} path variable values and returns a valid bound handler
func {{ .Name }}(f func(w http.ResponseWriter, r *http.Request, {{ range $idx, $p := .Params }}{{ if $idx }}, {{ end }}{{ $p }}{{ end }} string)) BoundHandler {
	return func(w http.ResponseWriter, r *http.Request, pVars pathVars) {
		f(w, r, {{ range $idx, $el := .Params }}{{ if $idx }}, {{ end }}pVars[{{ $idx }}]{{ end }})
    }
}
{{ else if eq .ArrLen 0 }}
// {{ .Name }} takes in a no path variable handler and returns a BoundHandler fit for static paths
func {{ .Name }}(f func(w http.ResponseWriter, r *http.Request)) BoundHandler {
	return func(w http.ResponseWriter, r *http.Request, _ pathVars) {
		f(w, r)
	}
}
{{ else if eq .ArrLen $.MaxVars }}
// {{ .Name }} takes in handler expecting array of {{ $.MaxVars }} path variable values and returns a valid bound handler
func {{ .Name }}(f func(w http.ResponseWriter, r *http.Request, pVars [maxVars]string)) BoundHandler {
	return func(w http.ResponseWriter, r *http.Request, pVars pathVars) {
		f(w, r, [maxVars]string(pVars))
	}
}
{{ else }}
// {{ .Name }} takes in handler expecting array of {{ .ArrLen }} path variable values and returns a valid bound handler
func {{ .Name }}(f func(w http.ResponseWriter, r *http.Request, pVars [{{ .ArrLen }}]string)) BoundHandler {
	return func(w http.ResponseWriter, r *http.Request, pVars pathVars) {
		var trimmed [{{ .ArrLen }}]string
		copy(trimmed[:], pVars[:])
		f(w, r, trimmed)
	}
}
{{ end }}
{{ end }}
`))
)

func writeFunctionFile(w io.Writer, sigs []Signature) error {
	var buf bytes.Buffer
	if err := tmplFunc.Execute(&buf, struct {
		Signatures []Signature
		MaxVars    int
	}{sigs, 8}); err != nil {
		return fmt.Errorf("tmplFunc.Execute: %v", err)
	}

	return writeFormatted(buf.Bytes(), w)
}
